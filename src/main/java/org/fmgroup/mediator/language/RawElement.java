package org.fmgroup.mediator.language;

import org.antlr.v4.runtime.ParserRuleContext;
import org.fmgroup.mediator.language.scope.Scope;

import java.util.ArrayList;
import java.util.List;

public interface RawElement {

    RawElement fromContext(ParserRuleContext context) throws ValidationException;

    RawElement getParent();
    RawElement setParent(RawElement parent);

    default RawElement clone(RawElement parent) throws ValidationException {
        throw ValidationException.UnderDevelopment();
    }

    RawElement validate() throws ValidationException;


    /**
     * Parses a ParserRuleContext generated by antlr runtime, and converts it into a Mediator Element.
     * You need to be very careful choosing how to use this method, in forms of:
     * 1. `target = new RawElement().parse(...)`, and
     * 2.
     * ```
     *     target = new RawElement();
     *     target.parse(...);
     * ```
     *
     * In the first form, target is not assigned before parsing of the RawElement finishes. So during
     * the parsing process, the parent does not know it has such a child element.
     *
     * @param context
     * @param parent
     * @return
     * @throws ValidationException
     */
    default RawElement parse(ParserRuleContext context, RawElement parent) throws ValidationException {
        return this.setParent(parent)
                .fromContext(context)
                .validate();
    }

    default List<Scope> getScopes() {
        RawElement p = this;
        List<Scope> result = new ArrayList<>();

        while (p != null) {
            if (p instanceof Scope) result.add((Scope) p);
            p = p.getParent();
        }

        return result;
    }

    default Scope getTopScope() {
        List<Scope> scopes = this.getScopes();
        return scopes.get(scopes.size() - 1);
    }

    default Scope getCurrentScope() {
        return getScopes().get(0);
    }
}
